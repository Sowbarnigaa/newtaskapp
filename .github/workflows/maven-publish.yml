name: Maven Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
   
jobs:
   # paths-filter:
   #  runs-on: ubuntu-latest
   #  outputs:
   #    output1: ${{ steps.filter.outputs.workflows }}
   #  steps:
   #  - uses: actions/checkout@v2
   #  - uses: dorny/paths-filter@v2
   #    id: filter
   #    with:
   #      filters: |
   #        workflows:
   #          - 'MyApp/**'
   
   #  - name: workflow tests
   #    if: steps.filter.outputs.workflows == 'true'
   #    run: echo "MyApp file editted"

 
   #  - name: not workflow tests
   #    if: steps.filter.outputs.workflows != 'true'
   #    run: echo "taskappfe file editted"
 
          
  checkout-code:
      runs-on: self-hosted
      steps:
        - uses: actions/checkout@v4
            
  integration-unit-test:
        needs: [checkout-code]
        runs-on: self-hosted
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
          
          # - name: Install JDK 21
          #   uses: actions/setup-java@v4
          #   with:
          #     java-version: '21'
          #     distribution: 'temurin'
              
          - name: Install Elasticsearch
            run: |
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.8.1-linux-x86_64.tar.gz
              tar -xzf elasticsearch-8.8.1-linux-x86_64.tar.gz
              ./elasticsearch-8.8.1/bin/elasticsearch &
    
          - name: Wait for Elasticsearch to start
            run: |
              sleep 30 # Adjust sleep time based on Elasticsearch startup time
              curl -X GET "localhost:9200/_cluster/health?wait_for_status=yellow&timeout=60s"
    
          - name: Run integration tests
            run: mvn test --file ./MyApp/pom.xml
            
        # if: needs.paths-filter.outputs.output1 == 'true'
        # services:
        #   elasticsearch:
        #     image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
        #     env:
        #       discovery.type: single-node
        #       xpack.security.enabled: false
        #     options: >-
        #       --health-cmd "curl -f http://localhost:9200"
        #       --health-interval 20s
        #       --health-timeout 5s
        #       --health-retries 5 
        #     ports:
        #       - "9200:9200"
        #       - "9300:9300"
        # steps: 
        #    - uses: actions/checkout@v4
        #    - name: Set up JDK 21
        #      uses: actions/setup-java@v4
        #      with:
        #         java-version: '21'
        #         distribution: 'temurin'
        #    - name: Run unit tests
        #      run: mvn test --file ./MyApp/pom.xml
          
  build_backend:
     runs-on: self-hosted
     needs: [integration-unit-test]
     steps:
        - uses: actions/checkout@v4
        - name: Set up JDK 21
          uses: actions/setup-java@v4
          with:
                java-version: '21'
                distribution: 'temurin'
        - name: Build with Maven
          run: |
           mvn -B package --file ./MyApp/pom.xml -DskipTests
           # cd MyApp
           # mvn --batch-mode --update-snapshots verify
           
        - name: build spring boot image
          run: docker build -t spring-app .
    
        - name: display spring-app image
          run: docker images
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
                  registry: docker.io
                  username:  ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
    
        - name: Build and push Backend Docker image
          uses: docker/build-push-action@v4
          with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: sowbarnigaa/backrepo:1

  build_frontend:
    name: frontend
    runs-on: self-hosted
    # needs: [build_backend]
    # if: needs.paths-filter.outputs.output1 != 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        
      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 'v20.11.0'

      - name: build angular image
        run: |
          cd taskappfe
          docker build -t angular-app .

      - name: display spring-app image
        run: docker images
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username:  ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./taskappfe
          file: ./taskappfe/Dockerfile
          push: true
          tags: sowbarnigaa/frontrepo:1
        
  deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
 
      - name: Login to  Docker hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: check images
        run: docker images
      - name: build elastic search image
        run: docker pull docker.elastic.co/elasticsearch/elasticsearch:8.8.1
 
      - name: build springboot image
        run: docker pull sowbarnigaa/backrepo:latest
 
      - name: build angular image
        run: docker pull sowbarnigaa/frontrepo:latest
 
 
      - name: docker compose
        run: docker-compose -f ./MyApp/docker-compose.yaml up -d
          
  
